{"version":3,"sources":["img/rick-and-morty-title.png","Character.js","App.js","reportWebVitals.js","index.js"],"names":["Character","status","info","borderWidth","borderRadius","width","height","p","flexDir","justifyContent","alignItems","as","size","name","species","ml","colorScheme","src","image","alt","opacity","App","useState","characters","setCharacter","isLoading","setIsLoading","searchCharacter","setSearchCharacter","setStatus","hasMore","setHasMore","nextPage","setNextPage","useEffect","getCharacters","a","fetch","then","response","json","data","next","results","reSearch","newData","concat","findCharacter","error","display","RickAndMorty","marginTop","variant","placeholder","onChange","value","target","marginRight","marginLeft","onClick","dataLength","length","loader","style","overflow","padding","flexWrap","gridGap","map","character","index","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.049e18a2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/rick-and-morty-title.047c4ff8.png\";","import { Box, Flex, Heading, Image, Badge } from '@chakra-ui/react'\n\nconst Character = ({ info }) => {\n  const isAlive = () => {\n    return info.status === 'Alive'\n  }\n\n  const characterStatus = (status) => {\n    if (status === 'Alive') {\n      return 'green'\n    } else if (status === 'Dead') {\n      return 'red'\n    } else {\n      return 'gray'\n    }\n  }\n\n  return (\n    <Box borderWidth=\"1px\" borderRadius=\"lg\" width=\"400px\" height=\"400px\">\n      <Flex\n        p=\"10px\"\n        flexDir=\"column\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        <Heading as=\"h3\" size=\"md\">\n          {info.name}\n        </Heading>\n        <p>{info.species}</p>\n        <Badge ml=\"1\" colorScheme={characterStatus(info.status)}>\n          {info.status}\n        </Badge>\n      </Flex>\n      <Flex justifyContent=\"center\" alignItems=\"center\">\n        <Image\n          src={info.image}\n          alt={info.name}\n          width=\"300px\"\n          height=\"300px\"\n          opacity={isAlive() ? 'unset' : '0.2'}\n        />\n      </Flex>\n    </Box>\n  )\n}\n\nexport default Character\n","import { Button, Flex, Image, Input, Select, Spinner } from '@chakra-ui/react'\nimport { useEffect, useState } from 'react'\nimport RickAndMorty from './img/rick-and-morty-title.png'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport Character from './Character'\n\nfunction App() {\n  const [characters, setCharacter] = useState([])\n  const [isLoading, setIsLoading] = useState(false)\n  const [searchCharacter, setSearchCharacter] = useState('')\n  const [status, setStatus] = useState('')\n  const [hasMore, setHasMore] = useState(true)\n  const [nextPage, setNextPage] = useState('')\n\n  useEffect(() => {\n    const characters = getCharacters()\n\n    setCharacter(characters)\n  }, [])\n\n  const getCharacters = async () => {\n    setIsLoading(true)\n\n    const data = await fetch('https://rickandmortyapi.com/api/character').then(\n      (response) => response.json()\n    )\n\n    setNextPage(data.info.next)\n    setCharacter(data.results)\n    setIsLoading(false)\n  }\n\n  const reSearch = async () => {\n    setIsLoading(true)\n    const data = await fetch(nextPage).then((response) => response.json())\n    setNextPage(data.info.next)\n    data.info.next ? setHasMore(true) : setHasMore(false)\n    const newData = characters.concat(data.results)\n    setCharacter(newData)\n    setIsLoading(false)\n  }\n\n  const findCharacter = async () => {\n    setIsLoading(true)\n    const data = await fetch(\n      `https://rickandmortyapi.com/api/character/?name=${searchCharacter}&status=${status}`\n    ).then((response) => response.json())\n\n    data.info.next ? setHasMore(true) : setHasMore(false)\n    setNextPage(data.info.next)\n    setCharacter(data.error ? [] : data.results)\n    setIsLoading(false)\n  }\n\n  const handleSearchChange = ({ target: { value } }) => {\n    setSearchCharacter(value)\n  }\n\n  const hanldeStatus = ({ target: { value } }) => {\n    setStatus(value)\n  }\n\n  return (\n    <Flex\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      height=\"100hv\"\n      flexDir=\"column\"\n      width=\"100hv\"\n    >\n      <Flex>\n        <Image width=\"400px\" src={RickAndMorty} />\n      </Flex>\n      <Flex marginTop=\"30px\" alignItems=\"center\" justifyContent=\"center\">\n        <Input\n          variant=\"filled\"\n          placeholder=\"Find Character\"\n          width=\"xl\"\n          onChange={handleSearchChange}\n          value={searchCharacter}\n        />\n        <Select\n          variant=\"filled\"\n          placeholder=\"Status\"\n          marginRight=\"5px\"\n          marginLeft=\"10px\"\n          width=\"120px\"\n          height=\"40px\"\n          borderRadius=\"5px\"\n          onChange={hanldeStatus}\n        >\n          <option value=\"alive\">Alive</option>\n          <option value=\"dead\">Dead</option>\n          <option value=\"unknown\">Unknown</option>\n        </Select>\n        <Button marginLeft=\"5\" onClick={findCharacter}>\n          Buscar &nbsp; {isLoading && <Spinner />}\n        </Button>\n      </Flex>\n      <InfiniteScroll\n        dataLength={characters.length}\n        next={reSearch}\n        hasMore={hasMore}\n        loader={\n          <Flex justifyContent=\"center\">\n            <Spinner size=\"xl\" />\n          </Flex>\n        }\n        style={{ overflow: 'hidden' }}\n      >\n        <Flex\n          width=\"100%\"\n          marginTop=\"50px\"\n          padding=\"25px\"\n          flexWrap=\"wrap\"\n          gridGap=\"50px\"\n        >\n          {characters.length > 0 &&\n            characters.map((character, index) => (\n              <Character key={index} info={character} />\n            ))}\n        </Flex>\n      </InfiniteScroll>\n    </Flex>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { ChakraProvider } from '@chakra-ui/react'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}